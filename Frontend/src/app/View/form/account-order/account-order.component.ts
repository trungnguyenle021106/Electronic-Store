import { Component, EventEmitter, inject, Output } from '@angular/core';
import { Order } from '../../../Model/Order/Order';
import { OrderService } from '../../../Service/Order/order.service';
import { MatDialog } from '@angular/material/dialog';
import { OrderdetailComponent } from '../../orderdetail/orderdetail.component';

@Component({
  selector: 'app-account-order',
  standalone: false,
  templateUrl: './account-order.component.html',
  styleUrl: './account-order.component.css'
})
export class AccountOrderComponent {
  isEmptyOrder: boolean = false;
  selectedStatus: string = 'T·∫§T C·∫¢';

  searchKeyword: string = ''; // üí° Bi·∫øn ƒë·ªÉ l∆∞u t·ª´ kh√≥a t√¨m ki·∫øm
  orders: Order[] = [];
  allOrders: Order[] = [];
  readonly dialog = inject(MatDialog);
  statusMap: { [key: string]: string | undefined } = {
    'T·∫§T C·∫¢': undefined, // 'T·∫§T C·∫¢' kh√¥ng g·ª≠i tham s·ªë status l√™n API
    'ƒêang ch·ªù x·ª≠ l√Ω': 'ƒêang ch·ªù x·ª≠ l√Ω', // M·ªöI
    'ƒêang x·ª≠ l√Ω': 'ƒêang x·ª≠ l√Ω', // Tr·∫°ng th√°i m·ªõi
    'ƒê√£ giao ƒëi': 'ƒê√£ giao ƒëi', // ƒêANG V·∫¨N CHUY·ªÇN
    'ƒê√£ giao h√†ng': 'ƒê√£ giao h√†ng', // N·∫øu b·∫°n mu·ªën c√≥ tab ri√™ng cho "ƒê√£ giao h√†ng"
    'ƒê√£ h·ªßy': 'ƒê√£ h·ªßy', // HU·ª∂
    'ƒê√£ ho√†n ti·ªÅn': 'ƒê√£ ho√†n ti·ªÅn',
    'Ho√†n th√†nh': 'Ho√†n th√†nh', // HO√ÄN TH√ÄNH
  };


  constructor(private orderService: OrderService) {
    this.loadOrders(this.selectedStatus);
  }

  OnclickDetail(order: Order): void {
    console.log('Xem chi ti·∫øt ƒë∆°n h√†ng:', order);

    // M·ªü dialog v√† truy·ªÅn d·ªØ li·ªáu ƒë∆°n h√†ng v√†o
    const dialogRef = this.dialog.open(OrderdetailComponent, {
      width: '800px', // ƒê·∫∑t ƒë·ªô r·ªông c·ªßa dialog
      data: order // Truy·ªÅn ƒë·ªëi t∆∞·ª£ng order v√†o dialog
    });

    // T√πy ch·ªçn: X·ª≠ l√Ω k·∫øt qu·∫£ khi dialog ƒë√≥ng
    dialogRef.afterClosed().subscribe(result => {
      console.log('Dialog ƒë√£ ƒë√≥ng v·ªõi k·∫øt qu·∫£:', result);
      // B·∫°n c√≥ th·ªÉ l√†m g√¨ ƒë√≥ v·ªõi `result` n·∫øu dialog tr·∫£ v·ªÅ d·ªØ li·ªáu
    });
  }

  applySearch(): void {
    const keyword = this.searchKeyword.toLowerCase().trim();

    if (!keyword) {
      // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a, hi·ªÉn th·ªã t·∫•t c·∫£ ƒë∆°n h√†ng g·ªëc c·ªßa tr·∫°ng th√°i hi·ªán t·∫°i
      this.orders = [...this.allOrders]; // Sao ch√©p m·∫£ng g·ªëc
    } else {
      // L·ªçc ƒë∆°n h√†ng theo M√£ ƒë∆°n h√†ng (ID)
      this.orders = this.allOrders.filter(order =>
        order.ID?.toString().toLowerCase().includes(keyword)
        // B·∫°n c√≥ th·ªÉ th√™m c√°c tr∆∞·ªùng kh√°c ƒë·ªÉ t√¨m ki·∫øm ·ªü ƒë√¢y, v√≠ d·ª•:
        // || order.Name?.toLowerCase().includes(keyword)
      );
    }
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i r·ªóng
    this.isEmptyOrder = this.orders.length === 0;
    console.log(`ƒê√£ l·ªçc ${this.orders.length} ƒë∆°n h√†ng v·ªõi t·ª´ kh√≥a: "${keyword}"`);
  }

  selectStatus(statusKey: string): void {
    this.selectedStatus = statusKey;
    this.loadOrders(statusKey);
  }

  loadOrders(statusKey: string): void {
    // ƒê·∫£m b·∫£o c√≥ customer ID tr∆∞·ªõc khi g·ªçi API

    // L·∫•y gi√° tr·ªã status th·ª±c t·∫ø ƒë·ªÉ g·ª≠i l√™n API t·ª´ statusMap
    const apiStatus = this.statusMap[statusKey];

    // G·ªçi API getOrderByCustomerID
    this.orderService.getOrderCurrentCustomer(apiStatus).subscribe({
      next: (orders: Order[]) => {
        this.allOrders = orders || [];
        // Sau ƒë√≥ √°p d·ª•ng t√¨m ki·∫øm ngay l·∫≠p t·ª©c (n·∫øu c√≥ t·ª´ kh√≥a c≈©)
        this.applySearch();

        this.isEmptyOrder = this.orders.length === 0;
        console.log(`ƒê√£ t·∫£i ${this.orders.length} ƒë∆°n h√†ng cho tr·∫°ng th√°i: ${statusKey}`);
        console.log(this.orders);
      },
      error: (error) => {
        console.error(`L·ªói khi t·∫£i ƒë∆°n h√†ng cho tr·∫°ng th√°i ${statusKey}:`, error);
        this.orders = []; // X√≥a danh s√°ch n·∫øu c√≥ l·ªói
        this.isEmptyOrder = true;
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng (t√πy ch·ªçn)
      }
    });
  }
}
